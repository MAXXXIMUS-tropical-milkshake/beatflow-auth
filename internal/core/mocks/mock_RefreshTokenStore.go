// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRefreshTokenStore is an autogenerated mock type for the RefreshTokenStore type
type MockRefreshTokenStore struct {
	mock.Mock
}

type MockRefreshTokenStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRefreshTokenStore) EXPECT() *MockRefreshTokenStore_Expecter {
	return &MockRefreshTokenStore_Expecter{mock: &_m.Mock}
}

// DeleteRefreshToken provides a mock function with given fields: ctx, prevTokenID
func (_m *MockRefreshTokenStore) DeleteRefreshToken(ctx context.Context, prevTokenID string) error {
	ret := _m.Called(ctx, prevTokenID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, prevTokenID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRefreshTokenStore_DeleteRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefreshToken'
type MockRefreshTokenStore_DeleteRefreshToken_Call struct {
	*mock.Call
}

// DeleteRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - prevTokenID string
func (_e *MockRefreshTokenStore_Expecter) DeleteRefreshToken(ctx interface{}, prevTokenID interface{}) *MockRefreshTokenStore_DeleteRefreshToken_Call {
	return &MockRefreshTokenStore_DeleteRefreshToken_Call{Call: _e.mock.On("DeleteRefreshToken", ctx, prevTokenID)}
}

func (_c *MockRefreshTokenStore_DeleteRefreshToken_Call) Run(run func(ctx context.Context, prevTokenID string)) *MockRefreshTokenStore_DeleteRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRefreshTokenStore_DeleteRefreshToken_Call) Return(_a0 error) *MockRefreshTokenStore_DeleteRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRefreshTokenStore_DeleteRefreshToken_Call) RunAndReturn(run func(context.Context, string) error) *MockRefreshTokenStore_DeleteRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshToken provides a mock function with given fields: ctx, tokenID
func (_m *MockRefreshTokenStore) GetRefreshToken(ctx context.Context, tokenID string) (int, error) {
	ret := _m.Called(ctx, tokenID)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshToken")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, tokenID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, tokenID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefreshTokenStore_GetRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshToken'
type MockRefreshTokenStore_GetRefreshToken_Call struct {
	*mock.Call
}

// GetRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenID string
func (_e *MockRefreshTokenStore_Expecter) GetRefreshToken(ctx interface{}, tokenID interface{}) *MockRefreshTokenStore_GetRefreshToken_Call {
	return &MockRefreshTokenStore_GetRefreshToken_Call{Call: _e.mock.On("GetRefreshToken", ctx, tokenID)}
}

func (_c *MockRefreshTokenStore_GetRefreshToken_Call) Run(run func(ctx context.Context, tokenID string)) *MockRefreshTokenStore_GetRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRefreshTokenStore_GetRefreshToken_Call) Return(_a0 int, _a1 error) *MockRefreshTokenStore_GetRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefreshTokenStore_GetRefreshToken_Call) RunAndReturn(run func(context.Context, string) (int, error)) *MockRefreshTokenStore_GetRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetRefreshToken provides a mock function with given fields: ctx, userID, tokenID, expiresIn
func (_m *MockRefreshTokenStore) SetRefreshToken(ctx context.Context, userID int, tokenID string, expiresIn time.Duration) error {
	ret := _m.Called(ctx, userID, tokenID, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for SetRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, time.Duration) error); ok {
		r0 = rf(ctx, userID, tokenID, expiresIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRefreshTokenStore_SetRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRefreshToken'
type MockRefreshTokenStore_SetRefreshToken_Call struct {
	*mock.Call
}

// SetRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - tokenID string
//   - expiresIn time.Duration
func (_e *MockRefreshTokenStore_Expecter) SetRefreshToken(ctx interface{}, userID interface{}, tokenID interface{}, expiresIn interface{}) *MockRefreshTokenStore_SetRefreshToken_Call {
	return &MockRefreshTokenStore_SetRefreshToken_Call{Call: _e.mock.On("SetRefreshToken", ctx, userID, tokenID, expiresIn)}
}

func (_c *MockRefreshTokenStore_SetRefreshToken_Call) Run(run func(ctx context.Context, userID int, tokenID string, expiresIn time.Duration)) *MockRefreshTokenStore_SetRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockRefreshTokenStore_SetRefreshToken_Call) Return(_a0 error) *MockRefreshTokenStore_SetRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRefreshTokenStore_SetRefreshToken_Call) RunAndReturn(run func(context.Context, int, string, time.Duration) error) *MockRefreshTokenStore_SetRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRefreshTokenStore creates a new instance of MockRefreshTokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRefreshTokenStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRefreshTokenStore {
	mock := &MockRefreshTokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
