// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/MAXXXIMUS-tropical-milkshake/beatflow-auth/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockUserStore is an autogenerated mock type for the UserStore type
type MockUserStore struct {
	mock.Mock
}

type MockUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStore) EXPECT() *MockUserStore_Expecter {
	return &MockUserStore_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function with given fields: ctx, user
func (_m *MockUserStore) AddUser(ctx context.Context, user core.User) (int, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User) (int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type MockUserStore_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
func (_e *MockUserStore_Expecter) AddUser(ctx interface{}, user interface{}) *MockUserStore_AddUser_Call {
	return &MockUserStore_AddUser_Call{Call: _e.mock.On("AddUser", ctx, user)}
}

func (_c *MockUserStore_AddUser_Call) Run(run func(ctx context.Context, user core.User)) *MockUserStore_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User))
	})
	return _c
}

func (_c *MockUserStore_AddUser_Call) Return(userID int, err error) *MockUserStore_AddUser_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *MockUserStore_AddUser_Call) RunAndReturn(run func(context.Context, core.User) (int, error)) *MockUserStore_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *MockUserStore) DeleteUser(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserStore_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockUserStore_Expecter) DeleteUser(ctx interface{}, userID interface{}) *MockUserStore_DeleteUser_Call {
	return &MockUserStore_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *MockUserStore_DeleteUser_Call) Run(run func(ctx context.Context, userID int)) *MockUserStore_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserStore_DeleteUser_Call) Return(_a0 error) *MockUserStore_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_DeleteUser_Call) RunAndReturn(run func(context.Context, int) error) *MockUserStore_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserStore) GetUserByEmail(ctx context.Context, email string) (*core.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserStore_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserStore_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserStore_GetUserByEmail_Call {
	return &MockUserStore_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserStore_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserStore_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_GetUserByEmail_Call) Return(user *core.User, err error) *MockUserStore_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*core.User, error)) *MockUserStore_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *MockUserStore) GetUserByID(ctx context.Context, userID int) (*core.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*core.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *core.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserStore_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockUserStore_Expecter) GetUserByID(ctx interface{}, userID interface{}) *MockUserStore_GetUserByID_Call {
	return &MockUserStore_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *MockUserStore_GetUserByID_Call) Run(run func(ctx context.Context, userID int)) *MockUserStore_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserStore_GetUserByID_Call) Return(user *core.User, err error) *MockUserStore_GetUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_GetUserByID_Call) RunAndReturn(run func(context.Context, int) (*core.User, error)) *MockUserStore_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockUserStore) GetUserByUsername(ctx context.Context, username string) (*core.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserStore_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserStore_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockUserStore_GetUserByUsername_Call {
	return &MockUserStore_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockUserStore_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserStore_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_GetUserByUsername_Call) Return(user *core.User, err error) *MockUserStore_GetUserByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (*core.User, error)) *MockUserStore_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: cxt, user
func (_m *MockUserStore) UpdateUser(cxt context.Context, user core.UpdateUser) (int, error) {
	ret := _m.Called(cxt, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateUser) (int, error)); ok {
		return rf(cxt, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateUser) int); ok {
		r0 = rf(cxt, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.UpdateUser) error); ok {
		r1 = rf(cxt, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserStore_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - cxt context.Context
//   - user core.UpdateUser
func (_e *MockUserStore_Expecter) UpdateUser(cxt interface{}, user interface{}) *MockUserStore_UpdateUser_Call {
	return &MockUserStore_UpdateUser_Call{Call: _e.mock.On("UpdateUser", cxt, user)}
}

func (_c *MockUserStore_UpdateUser_Call) Run(run func(cxt context.Context, user core.UpdateUser)) *MockUserStore_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.UpdateUser))
	})
	return _c
}

func (_c *MockUserStore_UpdateUser_Call) Return(userID int, err error) *MockUserStore_UpdateUser_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *MockUserStore_UpdateUser_Call) RunAndReturn(run func(context.Context, core.UpdateUser) (int, error)) *MockUserStore_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserStore creates a new instance of MockUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStore {
	mock := &MockUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
